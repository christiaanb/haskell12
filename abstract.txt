This paper presents our experience from implementing \soosim --- an operating system simulator, written in Haskell. 
We briefly discuss the goals and purposed usage of our simulator. 
We examine in detail the language features, extensions, programming patterns and techniques, used to implement \soosim. 
These include coroutines, type classes, monads, techniques for embedded domain-specific languages, and dynamic types. 
Coroutines were especially useful to implement synchronous communication model.
With the parameterised monads we were able to eliminate dynamic types from our code.
